{"version":3,"file":"zod-prisma.cjs.development.js","sources":["../src/config.ts","../src/util.ts","../src/docs.ts","../src/types.ts","../src/generator.ts","../src/index.ts"],"sourcesContent":["import { z } from 'zod'\n\nconst configBoolean = z.enum(['true', 'false']).transform((arg) => JSON.parse(arg))\n\nexport const configSchema = z.object({\n\trelationModel: configBoolean.default('true').or(z.literal('default')),\n\tmodelSuffix: z.string().default('Model'),\n\tmodelCase: z.enum(['PascalCase', 'camelCase']).default('PascalCase'),\n\tuseDecimalJs: configBoolean.default('false'),\n\timports: z.string().optional(),\n\tprismaJsonNullability: configBoolean.default('true'),\n})\n\nexport type Config = z.infer<typeof configSchema>\n\nexport type PrismaOptions = {\n\tschemaPath: string\n\toutputPath: string\n\tclientPath: string\n}\n\nexport type Names = {\n\tmodel: string\n\trelated: string\n}\n","import { DMMF } from '@prisma/generator-helper'\nimport type { CodeBlockWriter } from 'ts-morph'\nimport { Config } from './config'\n\nexport const writeArray = (writer: CodeBlockWriter, array: string[], newLine = true) =>\n\tarray.forEach((line) => writer.write(line).conditionalNewLine(newLine))\n\nexport const useModelNames = ({ modelCase, modelSuffix, relationModel }: Config) => {\n\tconst formatModelName = (name: string, prefix = '') => {\n\t\tif (modelCase === 'camelCase') {\n\t\t\tname = name.slice(0, 1).toLowerCase() + name.slice(1)\n\t\t}\n\t\treturn `${prefix}${name}${modelSuffix}`\n\t}\n\n\treturn {\n\t\tmodelName: (name: string) => formatModelName(name, relationModel === 'default' ? '_' : ''),\n\t\trelatedModelName: (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n\t\t\tformatModelName(\n\t\t\t\trelationModel === 'default' ? name.toString() : `Related${name.toString()}`\n\t\t\t),\n\t}\n}\n\nexport const needsRelatedModel = (model: DMMF.Model, config: Config) =>\n\tmodel.fields.some((field) => field.kind === 'object') && config.relationModel !== false\n\nexport const chunk = <T extends any[]>(input: T, size: number): T[] => {\n\treturn input.reduce((arr, item, idx) => {\n\t\treturn idx % size === 0\n\t\t\t? [...arr, [item]]\n\t\t\t: [...arr.slice(0, -1), [...arr.slice(-1)[0], item]]\n\t}, [])\n}\n\nexport const dotSlash = (input: string) => {\n\tconst converted = input\n\t\t.replace(/^\\\\\\\\\\?\\\\/, '')\n\t\t.replace(/\\\\/g, '/')\n\t\t.replace(/\\/\\/+/g, '/')\n\n\tif (converted.includes(`/node_modules/`)) return converted.split(`/node_modules/`).slice(-1)[0]\n\n\tif (converted.startsWith(`../`)) return converted\n\n\treturn './' + converted\n}\n","import { ArrayTree, parse, stringify } from 'parenthesis'\nimport { chunk } from './util'\n\nexport const getJSDocs = (docString?: string) => {\n\tconst lines: string[] = []\n\n\tif (docString) {\n\t\tconst docLines = docString.split('\\n').filter((dL) => !dL.trimStart().startsWith('@zod'))\n\n\t\tif (docLines.length) {\n\t\t\tlines.push('/**')\n\t\t\tdocLines.forEach((dL) => lines.push(` * ${dL}`))\n\t\t\tlines.push(' */')\n\t\t}\n\t}\n\n\treturn lines\n}\n\nexport const getZodDocElements = (docString: string) =>\n\tdocString\n\t\t.split('\\n')\n\t\t.filter((line) => line.trimStart().startsWith('@zod'))\n\t\t.map((line) => line.trimStart().slice(4))\n\t\t.flatMap((line) =>\n\t\t\t// Array.from(line.matchAll(/\\.([^().]+\\(.*?\\))/g), (m) => m.slice(1)).flat()\n\t\t\tchunk(parse(line), 2)\n\t\t\t\t.slice(0, -1)\n\t\t\t\t.map(\n\t\t\t\t\t([each, contents]) =>\n\t\t\t\t\t\t(each as string).replace(/\\)?\\./, '') +\n\t\t\t\t\t\t`${stringify(contents as ArrayTree)})`\n\t\t\t\t)\n\t\t)\n\nexport const computeCustomSchema = (docString: string) => {\n\treturn getZodDocElements(docString)\n\t\t.find((modifier) => modifier.startsWith('custom('))\n\t\t?.slice(7)\n\t\t.slice(0, -1)\n}\n\nexport const computeModifiers = (docString: string) => {\n\treturn getZodDocElements(docString).filter((each) => !each.startsWith('custom('))\n}\n","import type { DMMF } from '@prisma/generator-helper'\nimport { computeCustomSchema, computeModifiers } from './docs'\n\nexport const getZodConstructor = (\n\tfield: DMMF.Field,\n\tgetRelatedModelName = (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n\t\tname.toString()\n) => {\n\tlet zodType = 'z.unknown()'\n\tlet extraModifiers: string[] = ['']\n\tif (field.kind === 'scalar') {\n\t\tswitch (field.type) {\n\t\t\tcase 'String':\n\t\t\t\tzodType = 'z.string()'\n\t\t\t\tbreak\n\t\t\tcase 'Int':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\textraModifiers.push('int()')\n\t\t\t\tbreak\n\t\t\tcase 'BigInt':\n\t\t\t\tzodType = 'z.bigint()'\n\t\t\t\tbreak\n\t\t\tcase 'DateTime':\n\t\t\t\tzodType = 'z.date()'\n\t\t\t\tbreak\n\t\t\tcase 'Float':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Decimal':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Json':\n\t\t\t\tzodType = 'z.any()'\n\t\t\t\tbreak\n\t\t\tcase 'Boolean':\n\t\t\t\tzodType = 'z.boolean()'\n\t\t\t\tbreak\n\t\t\t// TODO: Proper type for bytes fields\n\t\t\tcase 'Bytes':\n\t\t\t\tzodType = 'z.unknown()'\n\t\t\t\tbreak\n\t\t}\n\t} else if (field.kind === 'enum') {\n\t\tzodType = `z.nativeEnum(prisma.${field.type})`\n\t} else if (field.kind === 'object') {\n\t\tzodType = getRelatedModelName(field.type)\n\t}\n\n\tif (field.isList) extraModifiers.push('array()')\n\tif (field.documentation) {\n\t\tzodType = computeCustomSchema(field.documentation) ?? zodType\n\t\textraModifiers.push(...computeModifiers(field.documentation))\n\t}\n\tif (!field.isRequired && field.type !== 'Json') extraModifiers.push('nullish()')\n\t// if (field.hasDefaultValue) extraModifiers.push('optional()')\n\n\treturn `${zodType}${extraModifiers.join('.')}`\n}\n","import path from 'path'\nimport { DMMF } from '@prisma/generator-helper'\nimport {\n\tImportDeclarationStructure,\n\tSourceFile,\n\tStructureKind,\n\tVariableDeclarationKind,\n} from 'ts-morph'\nimport { Config, PrismaOptions } from './config'\nimport { dotSlash, needsRelatedModel, useModelNames, writeArray } from './util'\nimport { getJSDocs } from './docs'\nimport { getZodConstructor } from './types'\n\nexport const writeImportsForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t{ schemaPath, outputPath, clientPath }: PrismaOptions\n) => {\n\tconst { relatedModelName } = useModelNames(config)\n\tconst importList: ImportDeclarationStructure[] = [\n\t\t{\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'z',\n\t\t\tmoduleSpecifier: 'zod',\n\t\t},\n\t]\n\n\tif (config.imports) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'imports',\n\t\t\tmoduleSpecifier: dotSlash(\n\t\t\t\tpath.relative(outputPath, path.resolve(path.dirname(schemaPath), config.imports))\n\t\t\t),\n\t\t})\n\t}\n\n\tif (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamedImports: ['Decimal'],\n\t\t\tmoduleSpecifier: 'decimal.js',\n\t\t})\n\t}\n\n\tconst enumFields = model.fields.filter((f) => f.kind === 'enum')\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\tconst relativePath = path.relative(outputPath, clientPath)\n\n\tif (enumFields.length > 0) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tisTypeOnly: enumFields.length === 0,\n\t\t\tmoduleSpecifier: dotSlash(relativePath),\n\t\t\tdefaultImport: 'prisma',\n\t\t})\n\t}\n\n\tif (config.relationModel !== false && relationFields.length > 0) {\n\t\tconst filteredFields = relationFields.filter((f) => f.type !== model.name)\n\n\t\tif (filteredFields.length > 0) {\n\t\t\timportList.push({\n\t\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\t\tmoduleSpecifier: './index',\n\t\t\t\tnamedImports: Array.from(\n\t\t\t\t\tnew Set(\n\t\t\t\t\t\tfilteredFields.flatMap((f) => [\n\t\t\t\t\t\t\t`Complete${f.type}`,\n\t\t\t\t\t\t\trelatedModelName(f.type),\n\t\t\t\t\t\t])\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t})\n\t\t}\n\t}\n\n\tsourceFile.addImportDeclarations(importList)\n}\n\nexport const writeTypeSpecificSchemas = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tif (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n\t\tsourceFile.addStatements((writer) => {\n\t\t\twriter.newLine()\n\t\t\twriteArray(writer, [\n\t\t\t\t'// Helper schema for Decimal fields',\n\t\t\t\t'z',\n\t\t\t\t'.instanceof(Decimal)',\n\t\t\t\t'.or(z.string())',\n\t\t\t\t'.or(z.number())',\n\t\t\t\t'.refine((value) => {',\n\t\t\t\t'  try {',\n\t\t\t\t'    return new Decimal(value);',\n\t\t\t\t'  } catch (error) {',\n\t\t\t\t'    return false;',\n\t\t\t\t'  }',\n\t\t\t\t'})',\n\t\t\t\t'.transform((value) => new Decimal(value));',\n\t\t\t])\n\t\t})\n\t}\n}\n\nexport const generateSchemaForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName } = useModelNames(config)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tleadingTrivia: (writer) => writer.blankLineIfLastNot(),\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: modelName(model.name),\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write('z.object(')\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\tmodel.fields\n\t\t\t\t\t\t\t\t.filter((f) => f.kind !== 'object')\n\t\t\t\t\t\t\t\t.forEach((field) => {\n\t\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\t\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t\t.write(`${field.name}: ${getZodConstructor(field)}`)\n\t\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write(')')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const generateRelatedSchemaForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName, relatedModelName } = useModelNames(config)\n\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\n\tsourceFile.addInterface({\n\t\tname: `Complete${model.name}`,\n\t\tisExported: true,\n\t\textends: [`z.infer<typeof ${modelName(model.name)}>`],\n\t\tproperties: relationFields.map((f) => ({\n\t\t\thasQuestionToken: !f.isRequired,\n\t\t\tname: f.name,\n\t\t\ttype: `Complete${f.type}${f.isList ? '[]' : ''}${!f.isRequired ? ' | null' : ''}`,\n\t\t})),\n\t})\n\n\tsourceFile.addStatements((writer) =>\n\t\twriteArray(writer, [\n\t\t\t'',\n\t\t\t'/**',\n\t\t\t` * ${relatedModelName(\n\t\t\t\tmodel.name\n\t\t\t)} contains all relations on your model in addition to the scalars`,\n\t\t\t' *',\n\t\t\t' * NOTE: Lazy required in case of potential circular dependencies within schema',\n\t\t\t' */',\n\t\t])\n\t)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: relatedModelName(model.name),\n\t\t\t\ttype: `z.ZodSchema<Complete${model.name}>`,\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write(`z.lazy(() => ${modelName(model.name)}.extend(`)\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\trelationFields.forEach((field) => {\n\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\n\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t.write(\n\t\t\t\t\t\t\t\t\t\t`${field.name}: ${getZodConstructor(\n\t\t\t\t\t\t\t\t\t\t\tfield,\n\t\t\t\t\t\t\t\t\t\t\trelatedModelName\n\t\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write('))')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const populateModelFile = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\tprismaOptions: PrismaOptions\n) => {\n\twriteImportsForModel(model, sourceFile, config, prismaOptions)\n\twriteTypeSpecificSchemas(model, sourceFile, config, prismaOptions)\n\tgenerateSchemaForModel(model, sourceFile, config, prismaOptions)\n\tif (needsRelatedModel(model, config))\n\t\tgenerateRelatedSchemaForModel(model, sourceFile, config, prismaOptions)\n}\n\nexport const generateBarrelFile = (models: DMMF.Model[], indexFile: SourceFile) => {\n\tmodels.forEach((model) =>\n\t\tindexFile.addExportDeclaration({\n\t\t\tmoduleSpecifier: `./${model.name.toLowerCase()}`,\n\t\t})\n\t)\n}\n","// @ts-ignore Importing package.json for automated synchronization of version numbers\nimport { version } from '../package.json'\n\nimport { generatorHandler } from '@prisma/generator-helper'\nimport { SemicolonPreference } from 'typescript'\nimport { configSchema, PrismaOptions } from './config'\nimport { populateModelFile, generateBarrelFile } from './generator'\nimport { Project } from 'ts-morph'\n\ngeneratorHandler({\n\tonManifest() {\n\t\treturn {\n\t\t\tversion,\n\t\t\tprettyName: 'Zod Schemas',\n\t\t\tdefaultOutput: 'zod',\n\t\t}\n\t},\n\tonGenerate(options) {\n\t\tconst project = new Project()\n\n\t\tconst models = options.dmmf.datamodel.models\n\n\t\tconst { schemaPath } = options\n\t\tconst outputPath = options.generator.output!.value\n\t\tconst clientPath = options.otherGenerators.find(\n\t\t\t(each) => each.provider.value === 'prisma-client-js'\n\t\t)!.output!.value!\n\n\t\tconst results = configSchema.safeParse(options.generator.config)\n\t\tif (!results.success)\n\t\t\tthrow new Error(\n\t\t\t\t'Incorrect config provided. Please check the values you provided and try again.'\n\t\t\t)\n\n\t\tconst config = results.data\n\t\tconst prismaOptions: PrismaOptions = {\n\t\t\tclientPath,\n\t\t\toutputPath,\n\t\t\tschemaPath,\n\t\t}\n\n\t\tconst indexFile = project.createSourceFile(\n\t\t\t`${outputPath}/index.ts`,\n\t\t\t{},\n\t\t\t{ overwrite: true }\n\t\t)\n\n\t\tgenerateBarrelFile(models, indexFile)\n\n\t\tindexFile.formatText({\n\t\t\tindentSize: 2,\n\t\t\tconvertTabsToSpaces: true,\n\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t})\n\n\t\tmodels.forEach((model) => {\n\t\t\tconst sourceFile = project.createSourceFile(\n\t\t\t\t`${outputPath}/${model.name.toLowerCase()}.ts`,\n\t\t\t\t{},\n\t\t\t\t{ overwrite: true }\n\t\t\t)\n\n\t\t\tpopulateModelFile(model, sourceFile, config, prismaOptions)\n\n\t\t\tsourceFile.formatText({\n\t\t\t\tindentSize: 2,\n\t\t\t\tconvertTabsToSpaces: true,\n\t\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t\t})\n\t\t})\n\n\t\treturn project.save()\n\t},\n})\n"],"names":["configBoolean","z","enum","transform","arg","JSON","parse","configSchema","object","relationModel","default","or","literal","modelSuffix","string","modelCase","useDecimalJs","imports","optional","prismaJsonNullability","writeArray","writer","array","newLine","forEach","line","write","conditionalNewLine","useModelNames","formatModelName","name","prefix","slice","toLowerCase","modelName","relatedModelName","toString","needsRelatedModel","model","config","fields","some","field","kind","chunk","input","size","reduce","arr","item","idx","dotSlash","converted","replace","includes","split","startsWith","getJSDocs","docString","lines","docLines","filter","dL","trimStart","length","push","getZodDocElements","map","flatMap","each","contents","stringify","computeCustomSchema","find","modifier","computeModifiers","getZodConstructor","getRelatedModelName","zodType","extraModifiers","type","isList","documentation","isRequired","join","writeImportsForModel","sourceFile","schemaPath","outputPath","clientPath","importList","StructureKind","ImportDeclaration","namespaceImport","moduleSpecifier","path","relative","resolve","dirname","f","namedImports","enumFields","relationFields","relativePath","isTypeOnly","defaultImport","filteredFields","Array","from","Set","addImportDeclarations","writeTypeSpecificSchemas","_prismaOptions","addStatements","generateSchemaForModel","addVariableStatement","declarationKind","VariableDeclarationKind","Const","isExported","leadingTrivia","blankLineIfLastNot","declarations","initializer","inlineBlock","generateRelatedSchemaForModel","addInterface","extends","properties","hasQuestionToken","populateModelFile","prismaOptions","generateBarrelFile","models","indexFile","addExportDeclaration","generatorHandler","onManifest","version","prettyName","defaultOutput","onGenerate","options","project","Project","dmmf","datamodel","generator","output","value","otherGenerators","provider","results","safeParse","success","Error","data","createSourceFile","overwrite","formatText","indentSize","convertTabsToSpaces","semicolons","SemicolonPreference","Remove","save"],"mappings":"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"}